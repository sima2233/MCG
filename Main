import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.Random;

public class Main extends JFrame {
    private JLabel questionLabel, scoreLabel, timerLabel, feedbackLabel;
    private JTextField answerField, nameField;
    private JButton submitButton, startButton, instructionsButton;
    private JComboBox<String> difficultyBox;

    private double score = 0;   // now a double
    private int correctAnswer;
    private int timeLeft = 60;
    private Timer timer;
    private Random rand = new Random();

    // Arrays for leaderboard (store last 5 games)
    private double[] leaderboard = new double[5];
    private String[] playerNames = new String[5];
    private int gameCount = 0;

    private String currentPlayer = "Player";

    public Main() {
        setTitle("Math Challenge Game");
        setSize(450, 550);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new GridLayout(11, 1));

        // UI components
        questionLabel = new JLabel("Enter your name, choose difficulty, and click Start", SwingConstants.CENTER);
        scoreLabel = new JLabel("Score: 0", SwingConstants.CENTER);
        timerLabel = new JLabel("Time: 60", SwingConstants.CENTER);
        feedbackLabel = new JLabel("Previous Answer: ---", SwingConstants.CENTER);

        nameField = new JTextField("Player1");
        answerField = new JTextField();

        submitButton = new JButton("Submit");
        startButton = new JButton("Start Game");
        instructionsButton = new JButton("Instructions");

        // Difficulty dropdown
        String[] difficulties = {"Easy", "Medium", "Hard"};
        difficultyBox = new JComboBox<>(difficulties);

        // Add components
        add(new JLabel("Enter Your Name:", SwingConstants.CENTER));
        add(nameField);
        add(questionLabel);
        add(scoreLabel);
        add(timerLabel);
        add(difficultyBox);
        add(answerField);
        add(submitButton);
        add(startButton);
        add(instructionsButton);
        add(feedbackLabel);

        // Event listeners
        submitButton.addActionListener(e -> checkAnswer());
        startButton.addActionListener(e -> startGame());
        instructionsButton.addActionListener(e -> showInstructions());

        // Allow pressing Enter in the answer field
        answerField.addActionListener(e -> checkAnswer());

        setVisible(true);
    }

    private void showInstructions() {
        JOptionPane.showMessageDialog(this,
                "--- Instructions ---\n"
                        + "1. Choose your name and difficulty before starting.\n"
                        + "2. Solve as many math problems as possible in 60 seconds.\n"
                        + "3. Easy: +, - (0.5 points each).\n"
                        + "4. Medium: ×, ÷ (whole numbers only, 2 points each).\n"
                        + "5. Hard: +, -, ×, ÷ (whole numbers only, 3 points each).\n"
                        + "Leaderboard will show the top 5 scores.");
    }

    private void startGame() {
        currentPlayer = nameField.getText().trim();
        if (currentPlayer.isEmpty()) {
            currentPlayer = "Player" + (gameCount + 1);
        }

        score = 0;
        timeLeft = 60;
        scoreLabel.setText("Score: 0");
        timerLabel.setText("Time: " + timeLeft);
        feedbackLabel.setText("Previous Answer: ---");
        nextQuestion();

        // Disable Start while playing
        startButton.setEnabled(false);

        // Timer counts down every second
        timer = new Timer(1000, e -> {
            timeLeft--;
            timerLabel.setText("Time: " + timeLeft);
            if (timeLeft <= 0) {
                ((Timer) e.getSource()).stop();
                endGame();
            }
        });
        timer.start();
    }

    private void nextQuestion() {
        int num1, num2;
        char operator;

        String difficulty = (String) difficultyBox.getSelectedItem();

        if (difficulty.equals("Easy")) {
            num1 = rand.nextInt(10) + 1;
            num2 = rand.nextInt(10) + 1;
            operator = rand.nextBoolean() ? '+' : '-';
        } else if (difficulty.equals("Medium")) {
            num1 = rand.nextInt(20) + 1;
            num2 = rand.nextInt(20) + 1;
            operator = rand.nextBoolean() ? '*' : '/';
            if (operator == '/') {
                num2 = rand.nextInt(19) + 1; // ensure num2 > 0
                num1 = num2 * (rand.nextInt(10) + 1); // make divisible
            }
        } else { // Hard
            num1 = rand.nextInt(50) + 1;
            num2 = rand.nextInt(50) + 1;
            char[] ops = {'+', '-', '*', '/'};
            operator = ops[rand.nextInt(ops.length)];
            if (operator == '/') {
                num2 = rand.nextInt(49) + 1;
                num1 = num2 * (rand.nextInt(10) + 1); // make divisible
            }
        }

        // Calculate correct answer
        switch (operator) {
            case '+': correctAnswer = num1 + num2; break;
            case '-': correctAnswer = num1 - num2; break;
            case '*': correctAnswer = num1 * num2; break;
            case '/': correctAnswer = num1 / num2; break;
            default: correctAnswer = 0;
        }

        questionLabel.setText(num1 + " " + operator + " " + num2 + " = ?");
        answerField.setText("");
    }

    private void checkAnswer() {
        try {
            int playerAnswer = Integer.parseInt(answerField.getText());
            String difficulty = (String) difficultyBox.getSelectedItem();

            if (playerAnswer == correctAnswer) {
                double points = 0.5;
                if (difficulty.equals("Medium")) points = 2;
                if (difficulty.equals("Hard")) points = 3;

                score += points;
                scoreLabel.setText("Score: " + String.format("%.1f", score));
                feedbackLabel.setText("Previous Answer: ✅ Correct! (+" + points + " points)");
            } else {
                feedbackLabel.setText("Previous Answer: ❌ Wrong! Correct was " + correctAnswer);
            }
            nextQuestion();
        } catch (NumberFormatException ex) {
            feedbackLabel.setText("Previous Answer: ⚠ Invalid input!");
        }
    }

    private void endGame() {
        feedbackLabel.setText("Game Over! Final Score: " + String.format("%.1f", score));

        // Save score in leaderboard (last 5 games)
        leaderboard[gameCount % leaderboard.length] = score;
        playerNames[gameCount % playerNames.length] = currentPlayer;
        gameCount++;

        // Copy arrays to sort them
        double[] scoresCopy = Arrays.copyOf(leaderboard, leaderboard.length);
        String[] namesCopy = Arrays.copyOf(playerNames, playerNames.length);

        // Bubble sort descending
        for (int i = 0; i < scoresCopy.length - 1; i++) {
            for (int j = 0; j < scoresCopy.length - i - 1; j++) {
                if (scoresCopy[j] < scoresCopy[j + 1]) {
                    double tempScore = scoresCopy[j];
                    scoresCopy[j] = scoresCopy[j + 1];
                    scoresCopy[j + 1] = tempScore;

                    String tempName = namesCopy[j];
                    namesCopy[j] = namesCopy[j + 1];
                    namesCopy[j + 1] = tempName;
                }
            }
        }

        // Build leaderboard
        StringBuilder lb = new StringBuilder("--- Leaderboard (Top 5) ---\n");
        for (int i = 0; i < scoresCopy.length; i++) {
            if (scoresCopy[i] > 0 && namesCopy[i] != null) {
                lb.append(namesCopy[i]).append(" - ").append(String.format("%.1f", scoresCopy[i])).append("\n");
            }
        }

        JOptionPane.showMessageDialog(this, lb.toString());

        // Re-enable Start button
        startButton.setEnabled(true);
    }

    public static void main(String[] args) {
        new Main();
    }
}
